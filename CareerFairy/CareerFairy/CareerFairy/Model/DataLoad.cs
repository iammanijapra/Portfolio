using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Excel;
using ExcelLibrary;
using System.IO;
using System.Data;

namespace CareerFairy.Model
{
    /// <summary>
    /// The dataload class handles the importation of data from symplicity
    /// </summary>
    public class DataLoad
    {
        private List<Registration> importedRegistrations;
        private SortedDictionary<string, EventDay> importedDays;
        private bool importedData;

        /// <summary>
        /// Prepares a new datalaod
        /// </summary>
        public DataLoad()
        {
            importedRegistrations = new List<Registration>();
            importedDays = new SortedDictionary<string, EventDay>();
            importedData = false;
        }

        /// <summary>
        /// Creates a career fair object from the imported data
        /// </summary>
        /// <returns>An instantiated CareerFair object</returns>
        public CareerFair createFair()
        {
            if (!importedData)
            {
                throw new InvalidOperationException("Must import data first");
            }
            CareerFair cfair = new CareerFair();
            cfair.Name = "Career Fair";
            foreach (string dayName in importedDays.Keys)
            {
                cfair.Days.Add(importedDays[dayName]);
            }
            return cfair;
        }

        /// <summary>
        /// Imports data from a report generated by symplicity.  The symplicity report must be in the format specified by the README
        /// </summary>
        /// <param name="filename">The filename of the .xls file</param>
        public void importData(String filename)
        {

            //FileStream stream = File.Open(filename, FileMode.Open, FileAccess.Read);

            var wb = ExcelLibrary.SpreadSheet.Workbook.Load(filename);
            /*IExcelDataReader excelReader = ExcelReaderFactory.CreateOpenXmlReader(stream);

            excelReader.IsFirstRowAsColumnNames = true;

            DataSet result = excelReader.AsDataSet();

            DataTable table = result.Tables[0];
            */
            var cells = wb.Worksheets[0].Cells;
            var headerRow = cells.GetRow(0);

            for (int idx = cells.FirstRowIndex + 1; idx <= cells.LastRowIndex; idx++)
            {
                var row = cells.GetRow(idx);
                int firstCol = row.FirstColIndex;

                string dayString = row.GetCell(firstCol).StringValue;
                if (!importedDays.ContainsKey(dayString))
                {
                    EventDay foundDay = new EventDay(dayString);
                    importedDays[dayString] = foundDay;
                }
                int? numberofBooths = null;
                string companyName = row.GetCell(row.FirstColIndex + 3).StringValue;
                Registration reg = new Registration();

                for (int j = row.FirstColIndex + 1; j <= row.FirstColIndex + 2; j++)
                {
                    string rowHeader = headerRow.GetCell(j).StringValue;
                    if (rowHeader.Contains(dayString))
                    {
                        numberofBooths = Int32.Parse(row.GetCell(j).StringValue);
                    }
                }

                if (numberofBooths == null)
                {
                    throw new Exception("Couldn't parse spreadsheet");
                }
                reg.DayAttending = importedDays[dayString];
                reg.Name = companyName;
                reg.NumBooths = (int)numberofBooths;
                importedDays[dayString].Registrations.Add(reg);
                importedRegistrations.Add(reg);
            }
            importedData = true;
            
        }
    }
}
